//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Sorting
{
    public static void main (String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        long t = sc.nextLong();
        
        while(t-- > 0)
        {
            long n = sc.nextLong();
            long arr[] = new long[(int)n];
            
            for(long i = 0; i < n; i++)
             arr[(int)i] = sc.nextLong();
             
            System.out.println(new Solution().inversionCount(arr, n));
            
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
      return mergeSort(arr, 0, arr.length-1);   
    }
    public static long mergeSort(long[] arr, int lo, int hi){
        long count = 0;
        if(lo<hi){
            int mid = lo+(hi-lo)/2;
            count += mergeSort(arr, lo,mid);
            count += mergeSort(arr, mid+1, hi);
            count += merge(arr, lo, mid, hi);
        }
        return count;
    }
    public static long merge(long[] arr, int lo, int mid, int hi){
        long[] left = Arrays.copyOfRange(arr, lo, mid+1);
        long[] right = Arrays.copyOfRange(arr, mid+1, hi+1);
        int i = 0, j = 0,  k = lo;
        long count = 0;
        while(i<left.length && j<right.length){
            if(left[i]<=right[j]){
                arr[k++] = left[i++];
            }else{
                arr[k++] = right[j++];
                count += mid-i+1-lo;
            }
        }
        while(i<left.length){
            arr[k++] = left[i++];
        }
        while(j<right.length){
            arr[k++] = right[j++];
        }
        return count;
    }
}
