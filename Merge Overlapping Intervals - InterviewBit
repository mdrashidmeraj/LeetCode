/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    class IntervalComparator implements Comparator<Interval>{
        public int compare(Interval i1, Interval i2){
            if(i1.start>i2.start){
                return 1;
            }
            return -1;
        }
    }    
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        ArrayList<Interval> arr = new ArrayList<>();
        Collections.sort(intervals, new IntervalComparator());
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        for(Interval i: intervals){
            if(i.start<=end){
                start = Math.min(start, i.start);
                end = Math.max(end, i.end);
            }else{
                Interval in = new Interval(start, end);
                arr.add(in);
                start = i.start;
                end = i.end;
            }
        }
        arr.add(new Interval(start, end));
        return arr;
    }
}
